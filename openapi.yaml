openapi: 3.0.1
info:
  title: Lolesports Api
  description: Unofficial documentation to the lolesports Api
  version: 1.0.0

paths:
  /getLeagues:
    get:
      operationId: getLeagues
      parameters:
        - $ref: '#/components/parameters/hl'

      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      leagues:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/extendedLeague'
                            - type: object
                              properties:
                                region:
                                  description: |
                                    Indicates which type of tournament the league is. Whether
                                    international or a regional tournament. The region name is
                                    given.
                                  type: string

      security:
        - apiKeyAuth: []

      servers:
        - url: &esports-api https://esports-api.lolesports.com/persisted/gw

  /getSchedule:
    get:
      operationId: getSchedule
      parameters:
        - $ref: '#/components/parameters/hl'
        - $ref: '#/components/parameters/leagueIds'
        - $ref: '#/components/parameters/pageToken'

      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      schedule:
                        type: object
                        properties:
                          updated:
                            description: The time the data presented was last updated
                            type: string
                            format: date-time
                          pages:
                            type: object
                            properties:
                              older:
                                $ref: "#/components/schemas/pageToken"
                              newer:
                                $ref: "#/components/schemas/pageToken"
                          events:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/extendedEvent'
                                - type: object
                                  properties:
                                    league:
                                      $ref: '#/components/schemas/baseLeague'
                                    match:
                                      type: object
                                      properties:
                                        teams:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              record:
                                                $ref: '#/components/schemas/record'
                                              result:
                                                type: object
                                                properties:
                                                  outcome:
                                                    $ref: '#/components/schemas/outcome'

      security:
        - apiKeyAuth: []

      servers:
        - url: *esports-api

  # Need to test if the leagueId and tournamentId work with this endpoint
  /getLive:
    get:
      operationId: getLive
      parameters:
        - $ref: '#/components/parameters/hl'

      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      schedule:
                        type: object
                        properties:
                          events:
                            type: array
                            description: |
                              Array of event objects representing matches that are
                              currently ongoing.

                              This will be null if no match is taking place at that
                              time
                            nullable: true
                            items:
                              allOf:
                                - $ref: '#/components/schemas/extendedEvent'
                                - type: object
                                  properties:
                                    id:
                                      type: string
                                    league:
                                      $ref: '#/components/schemas/extendedLeague'
                                    match:
                                      type: object
                                      properties:
                                        teams:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              slug:
                                                type: string
                                              record:
                                                $ref: '#/components/schemas/record'
                                              result:
                                                type: object
                                                properties:
                                                  outcome:
                                                    $ref: '#/components/schemas/outcome'

      security:
        - apiKeyAuth: []

      servers:
        - url: *esports-api

  /getTournamentsForLeague:
      get:
        operationId: getTournamentsForLeague
        parameters:
          - $ref: '#/components/parameters/hl'
          - $ref: '#/components/parameters/leagueId'

        responses:
          '200':
            description: Successful request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: object
                      properties:
                        leagues:
                          type: array
                          description: |
                            An array of league object(s) where each object contains an array of
                            tournaments.
                          items:
                            type: object
                            properties:
                              tournaments:
                                type: array
                                description: |
                                  An array of tournament object(s) where each object describes a
                                  specific tournament.
                                items:
                                  $ref: '#/components/schemas/tournament'

        security:
          - apiKeyAuth: []

        servers:
          - url: *esports-api

  /getStandings:
    get:
      operationId: getStandings
      parameters:
        - $ref: '#/components/parameters/hl'
        - $ref: '#/components/parameters/tournamentIds'

      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      standings:
                        type: array
                        description: |
                          Each object in the array contains details of each tournament requested.
                        items:
                          type: object
                          properties:
                            stages:
                              type: array
                              items:
                                $ref: '#/components/schemas/stage'

      security:
        - apiKeyAuth: []

      servers:
        - url: *esports-api

  /getCompletedEvents:
    get:
      operationId: getCompletedEvents
      parameters:
        - $ref: '#/components/parameters/hl'
        - $ref: '#/components/parameters/tournamentIds'

      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      schedule:
                        type: object
                        properties:
                          events:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/simpleEvent'
                                - type: object
                                  properties:
                                    games:
                                      type: array
                                      items:
                                        $ref: '#/components/schemas/game'
                                    match:
                                      type: object
                                      properties:
                                        type:
                                          type: string
                                          enum: [normal]

      security:
        - apiKeyAuth: []

      servers:
        - url: *esports-api

  /getEventDetails:
    get:
      operationId: getEventDetails
      parameters:
        - $ref: '#/components/parameters/hl'
        - $ref: '#/components/parameters/id'

      responses:
        '200':
          description: Succesful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      event:
                        allOf:
                          - $ref: '#/components/schemas/baseEvent'
                          - type: object
                            properties:
                              id:
                                type: string
                              type:
                                $ref: '#/components/schemas/eventType'
                              league:
                                $ref: '#/components/schemas/simpleLeague'
                              match:
                                type: object
                                properties:
                                  games:
                                    type: array
                                    items:
                                      $ref: '#/components/schemas/extendedGame'
                                  strategy:
                                    $ref: '#/components/schemas/baseStrategy'
                                  teams:
                                    type: array
                                    minItems: 2
                                    maxItems: 2
                                    items:
                                      type: object
                                      properties:
                                        id:
                                          $ref: '#/components/schemas/teamId'
                                        result:
                                          $ref: '#/components/schemas/result'
                              streams:
                                type: array
                                nullable: true
                                description: |
                                  For a live match this will contain information about various streams,
                                  the platforms they are on and the locale.

                                  Otherwise it will be null.
                                items:
                                  $ref: '#/components/schemas/extendedVod'
      security:
        - apiKeyAuth: []

      servers:
        - url: *esports-api

components:
  schemas:
    pageToken:
      description: &pagetoken |
        Base 64 encoded string used to determine the
        next "page" of data to pull
      type: string
      format: byte
      nullable: true

    baseLeague:
      type: object
      properties:
        name:
          type: string
          description: The name of the league
          minLength: 1
        slug:
          type: string
          description: URL friendly version of the league's name
          minLength: 1

    simpleLeague:
      allOf:
        - $ref: '#/components/schemas/baseLeague'
        - type: object
          properties:
            id:
              description: The league's ID
              type: integer
            image:
              description: URL to an image of the League's logo
              type: string
              minLength: 1

    extendedLeague:
      allOf:
        - $ref: '#/components/schemas/simpleLeague'
        - type: object
          properties:
            priority:
              description: Unknown
              type: integer

    record:
      type: object
      nullable: true
      description: |
        Describes the amount of wins and losses the team has incurred
        in a particular stage of the tournament specifically group stage

        For knockout phase, each series is treated individually.

        This object is null when the match is ongoing and it is in the
        knockout stage.
      properties:
        losses:
          type: number
          minLength: 1
        wins:
          type: number
          minLength: 1

    result:
      type: object
      properties:
        gameWins:
          type: number
          description: |
            The number of games the team has won in that
            in the series
          minLength: 1

    outcome:
      type: string
      nullable: true
      description: |
        Indicate whether the team won or lost the series

        This will be null if the match is ongoing
      enum: [loss, win]

    team:
      type: object
      properties:
        code:
          type: string
          minLength: 1
        image:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1

    customTeam:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/teamId'
        side:
          type: string
          enum: [blue, red]

    teamId:
      type: string
      description: The team id

    baseStrategy:
      type: object
      properties:
        count:
          type: number
          enum: [1, 3, 5]

    strategy:
      allOf:
        - $ref: '#/components/schemas/baseStrategy'
        - type: object
          properties:
            type:
              type: string
              enum: [bestOf]

    teams:
      type: array
      minItems: 2
      maxItems: 2
      items:
        $ref: '#/components/schemas/team'

    baseMatch:
      type: object
      properties:
        teams:
          $ref: '#/components/schemas/teams'

    simpleMatch:
      allOf:
        - $ref: '#/components/schemas/baseMatch'
        - type: object
          properties:
            id:
              description: The match id
              type: string

    state:
      type: string
      enum: [completed, unstarted, inProgress]

    eventType:
      type: string
      enum: [match]

    baseEvent:
      type: object
      properties:
        match:
          $ref: '#/components/schemas/baseMatch'

    simpleEvent:
      type: object
      properties:
        startTime:
          type: string
          description: The time the match started
          format: date-time
        blockName:
          type: string
          nullable: true
        match:
          allOf:
            - $ref: '#/components/schemas/simpleMatch'
            - type: object
              properties:
                strategy:
                  $ref: '#/components/schemas/strategy'
                teams:
                  type: array
                  items:
                    type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/result'

    extendedEvent:
      allOf:
        - $ref: '#/components/schemas/simpleEvent'
        - type: object
          properties:
            state:
              $ref: '#/components/schemas/state'
            type:
              $ref: '#/components/schemas/eventType'

    tournament:
      type: object
      properties:
        endDate:
          type: string
          description: The date the tournament ends/ended.
          format: full-date
        id:
          type: string
          description: This is the tournament id
        slug:
          type: string
        startDate:
          type: string
          description: The date the tournament starts/started.
          format: full-date

    stage:
      type: object
      description: |
        Represents a stage in a tournament.

        Whether it is the group or knockout stage.
      properties:
          name:
            type: string
            description: The name of that stage of the tournament
          type:
            type: string
            description: The type of the stage.
            enum: [groups, bracket]
          slug:
            type: string
          sections:
            type: array
            description: |
              Each object in the array represents a particular round in that
              specific stage in the tournament.

              For the knockout stages, we could have the quarter finals,
              semi finals and the finals under their own sections.

              For the group stage, there is usually only one section.
            items:
              $ref: '#/components/schemas/section'

    section:
      type: object
      properties:
        name:
          type: string
          description: The name of the section
        matches:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/simpleMatch'
              - type: object
                properties:
                  state:
                    $ref: '#/components/schemas/state'
                  previousMatchIds:
                    type: array
                    description: |
                      This stores the previous match ids for the teams in the current
                      match were involved in.

                      For group stages this is usually null. For bracket stage it is
                      used to indicate the matches that were played before the match
                      in question.
                    nullable: true
                    items:
                      type: string
                  flags:
                  # Test this to see if it ever contains any other value apart from null
                    type: string
                    nullable: true
                    description: |
                      The purpose of this key is unknown. So far the only value it
                      has seems to be null.
                  teams:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          $ref: '#/components/schemas/teamId'
                        slug: &teamSlug
                          type: string
                          description: The URL friendly version of the team name
                        result:
                          $ref: '#/components/schemas/result'
        rankings:
          type: array
          description: |
            Contains details about the actual standings for that particular
            section

            This is mostly used for the group stage. For the knockout stages, it
            is usually empty.
          items:
            $ref: '#/components/schemas/ranking'

    ranking:
      type: object
      properties:
        ordinal:
          type: number
          description: The league position
        teams:
          type: array
          description: |
            The teams that are at that league position.

            In most cases there will only be one team object in this array. In
            cases where several teams are tied with the same score, this array will
            contain all teams tied for that position.
          items:
            allOf:
              - $ref: '#/components/schemas/team'
              - type: object
                properties:
                  id:
                    $ref: '#/components/schemas/teamId'
                  slug: *teamSlug
                  record:
                    $ref: '#/components/schemas/record'

    game:
      type: object
      properties:
        vods:
          type: array
          items:
            $ref: '#/components/schemas/vod'

    extendedGame:
      type: object
      properties:
        id:
          type: string
          description: The game ID
        state:
          $ref: '#/components/schemas/state'
        number:
          type: number
          description: The number of the game
          enum: [1, 2, 3, 4, 5]
        teams:
          type: array
          items:
            $ref: '#/components/schemas/customTeam'
        vods:
          type: array
          items:
            $ref: '#/components/schemas/extendedVod'

    vod:
      type: object
      properties:
        parameter:
          type: string

    extendedVod:
      allOf:
        - $ref: '#/components/schemas/vod'
        - type: object
          properties:
            locale:
              $ref: '#/components/schemas/locale'
            provider:
              type: string
              description: |
                The platform that is hosting the vod
              enum: [youtube, twitch]
            offset:
              type: number
              description: Purpose Unknown

    locale:
      type: string
      description: |
        This is the locale or language code as per ISO 639-1
      enum: [en-US, en-GB, en-AU, cs-CZ, de-DE, el-GR, es-ES,
        es-MX, fr-FR, hu-HU, it-IT, pl-PL, pt-BR, ro-RO, ru-RU,
        tr-TR, ja-JP, ko-KR]

  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

  parameters:
    hl:
      name: hl
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/locale'

    leagueIds:
      name: leagueId
      in: query
      description: |
        The id(s) of the league(s) you want details of
      schema:
        type: array
        items:
          type: number

    leagueId:
      name: leagueId
      in: query
      description: |
        The id of the league you want details of
      schema:
        type: number

    pageToken:
      name: pageToken
      in: query
      description: *pagetoken
      schema:
        type: string
        format: byte

    tournamentIds:
      name: tournamentId
      in: query
      description: |
        The id(s) of the tournament(s) you want details ofs
      schema:
        type: array
        items:
          type: number

    id:
      name: id
      in: query
      required: true
      description: |
        The id of the match that you want
      schema:
        type: number